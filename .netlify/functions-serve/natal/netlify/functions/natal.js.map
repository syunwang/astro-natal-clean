{
  "version": 3,
  "sources": ["file:///D:/astro-natal-clean/netlify/functions/natal.js"],
  "sourceRoot": "C:/Users/ADMIN/AppData/Local/Temp/tmp-37920-6fQ6x0p3boaB",
  "sourcesContent": ["// netlify/functions/natal.js\n// \u7EDF\u4E00\u628A\u4E0A\u6E38\u54CD\u5E94\u539F\u6587\u4E0E\u72B6\u6001\u7801\u56DE\u4F20\uFF0C\u65B9\u4FBF\u5B9A\u4F4D 403 \u7684\u771F\u5B9E\u539F\u56E0\n\nexport async function handler(event) {\n  try {\n    if (event.httpMethod !== \"POST\") {\n      return { statusCode: 405, body: JSON.stringify({ error: \"Method not allowed\" }) };\n    }\n\n    const cfgUrl = process.env.FREEASTRO_API_URL;\n    const cfgKey = process.env.FREEASTRO_API_KEY;\n\n    if (!cfgUrl || !cfgKey) {\n      return {\n        statusCode: 500,\n        body: JSON.stringify({\n          error: \"Missing FREEASTRO_API_URL or FREEASTRO_API_KEY in environment\",\n        }),\n      };\n    }\n\n    const input = JSON.parse(event.body || \"{}\");\n    const {\n      year, month, day, hour, minute, seconds = 0,\n      latitude, longitude, timezone,\n      language = \"en\",\n    } = input;\n\n    // \u4F60\u7684\u4E0A\u6E38 API \u9700\u8981\u7684\u5B57\u6BB5\u540D\u5982\u679C\u4E0D\u540C\uFF0C\u8BF7\u5728\u8FD9\u91CC\u505A\u6620\u5C04\n    const payload = {\n      year, month, day,\n      hours: hour,\n      minutes: minute,\n      seconds,\n      latitude,\n      longitude,\n      timezone,\n      language,\n    };\n\n    // \u517C\u5BB9\u4E24\u79CD\u5E38\u89C1\u7684\u9274\u6743\u5199\u6CD5\uFF1AAuthorization: Bearer ... / x-api-key: ...\n    const headers = { \"Content-Type\": \"application/json\" };\n    // 1) \u5982 cfgKey \u5DF2\u5305\u542B Bearer \u524D\u7F00\uFF0C\u5219\u76F4\u63A5\u7528\n    if (/^Bearer\\s+/i.test(cfgKey)) {\n      headers.Authorization = cfgKey;\n    } else {\n      // \u9ED8\u8BA4\u4E24\u79CD\u5934\u90FD\u5E26\u4E0A\uFF0C\u540E\u7AEF\u4F1A\u9009\u5176\u4E00\uFF08\u591A\u6570\u540E\u7AEF\u4E4B\u4E00\u5373\u53EF\uFF09\n      headers.Authorization = `Bearer ${cfgKey}`;\n      headers[\"x-api-key\"] = cfgKey;\n    }\n\n    const upstream = await fetch(cfgUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(payload),\n    });\n\n    const raw = await upstream.text();\n\n    // \u628A\u4E0A\u6E38\u72B6\u6001\u4E0E\u539F\u6587\u90FD\u6253\u56DE\u524D\u7AEF\uFF0C\u8C03\u8BD5\u7528\uFF08\u4E0A\u7EBF\u540E\u4F60\u4E5F\u53EF\u4EE5\u5173\u6389\uFF09\n    if (!upstream.ok) {\n      console.error(\"NATAL upstream error\", upstream.status, raw);\n      return {\n        statusCode: upstream.status,\n        body: JSON.stringify({\n          error: `NATAL HTTP ${upstream.status}`,\n          providerStatus: upstream.status,\n          providerBody: raw,     // \u8FD9\u91CC\u4F1A\u544A\u8BC9\u4F60\u4E3A\u4EC0\u4E48 403\uFF08\u5982 key \u65E0\u6548/\u672A\u6388\u6743\u57DF\u540D\u7B49\uFF09\n          sentToProvider: payload, // \u65B9\u4FBF\u6838\u5BF9\u53C2\u6570\n        }),\n      };\n    }\n\n    // \u4E0A\u6E38\u6210\u529F\uFF1A\u82E5\u5B83\u8FD4\u56DE JSON\uFF0C\u628A\u5B57\u7B26\u4E32\u76F4\u63A5\u56DE\u4F20\uFF1B\u5982\u679C\u4E0D\u662F JSON\uFF0C\u4F60\u4E5F\u4F1A\u62FF\u5230\u539F\u6587\n    return {\n      statusCode: 200,\n      headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n      body: raw,\n    };\n  } catch (err) {\n    console.error(\"NATAL function fatal error\", err);\n    return { statusCode: 500, body: JSON.stringify({ error: String(err) }) };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,eAAsB,QAAQ,OAAO;AACnC,MAAI;AACF,QAAI,MAAM,eAAe,QAAQ;AAC/B,aAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC,EAAE;AAAA,IAClF;AAEA,UAAM,SAAS,QAAQ,IAAI;AAC3B,UAAM,SAAS,QAAQ,IAAI;AAE3B,QAAI,CAAC,UAAU,CAAC,QAAQ;AACtB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,QAAQ,KAAK,MAAM,MAAM,QAAQ,IAAI;AAC3C,UAAM;AAAA,MACJ;AAAA,MAAM;AAAA,MAAO;AAAA,MAAK;AAAA,MAAM;AAAA,MAAQ,UAAU;AAAA,MAC1C;AAAA,MAAU;AAAA,MAAW;AAAA,MACrB,WAAW;AAAA,IACb,IAAI;AAGJ,UAAM,UAAU;AAAA,MACd;AAAA,MAAM;AAAA,MAAO;AAAA,MACb,OAAO;AAAA,MACP,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGA,UAAM,UAAU,EAAE,gBAAgB,mBAAmB;AAErD,QAAI,cAAc,KAAK,MAAM,GAAG;AAC9B,cAAQ,gBAAgB;AAAA,IAC1B,OAAO;AAEL,cAAQ,gBAAgB,UAAU,MAAM;AACxC,cAAQ,WAAW,IAAI;AAAA,IACzB;AAEA,UAAM,WAAW,MAAM,MAAM,QAAQ;AAAA,MACnC,QAAQ;AAAA,MACR;AAAA,MACA,MAAM,KAAK,UAAU,OAAO;AAAA,IAC9B,CAAC;AAED,UAAM,MAAM,MAAM,SAAS,KAAK;AAGhC,QAAI,CAAC,SAAS,IAAI;AAChB,cAAQ,MAAM,wBAAwB,SAAS,QAAQ,GAAG;AAC1D,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO,cAAc,SAAS,MAAM;AAAA,UACpC,gBAAgB,SAAS;AAAA,UACzB,cAAc;AAAA;AAAA,UACd,gBAAgB;AAAA;AAAA,QAClB,CAAC;AAAA,MACH;AAAA,IACF;AAGA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,gBAAgB,kCAAkC;AAAA,MAC7D,MAAM;AAAA,IACR;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,8BAA8B,GAAG;AAC/C,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,GAAG,EAAE,CAAC,EAAE;AAAA,EACzE;AACF;",
  "names": []
}
